@using System.Linq;
@using Todo.WebApp.Controllers;
@using static Todo.WebApp.Controllers.ControllerExtensions;
@using static Todo.WebApp.MvcModels.ValidationConstants;
@using static Todo.WebApp.Views.ViewDataNames;
@model Todo.WebApp.SharedModels.TodoList;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    void ListItemHtml(string value="", string indexName="")
    {
        <li class="itemContainer list-group-item">
            <div class="input-group">
                <input class="itemIdx" type="hidden" name="items.Index" value="@indexName" />
                <input
                    class="itemDesc form-control"
                    name="items[@indexName].description"
                    type="text"
                    value="@value"
                    required
                    minlength="@MinStrLen"
                    maxlength="@MaxStrLen"
                >
                <button class="addItemButton btn btn-outline-secondary" type="button">+</button>
                <button class="removeItemButton btn btn-outline-secondary" type="button">-</button>
                <div class="invalid-feedback">Must be between @MinStrLen and @MaxStrLen characters</div>
            </div>
        </li>
    }
}

@section pageHead {
<script src="/js/todolist-form.js"></script>
<template id="todo-item-template">
    @{ ListItemHtml(); }
</template>
}

<h1 class="mb-3">
    @if(null == Model) {
        @: Create new list
    }
    else {
        @: Edit list
    }
</h1>
<form id="todoList" method="POST" class="needs-validation mb-3" novalidate>
    <div>
        <label class="form-label" for="title">Title</label>
        <input
            class="form-control"
            type="text"
            name="title"
            required
            minlength="@MinStrLen"
            maxlength="@MaxStrLen"
            value="@Model?.Title"
        >
        <div class="invalid-feedback">Must be between @MinStrLen and @MaxStrLen characters</div>
    </div>
    <div class="mb-1">
        <label class="form-label mb-0">Items</label>
        <span id="itemCountDisplay" class="text-muted small">
            (@(Model?.Items?.Count ?? 1))
        </span>
        @*
        itemCountValidator exists to keep track of the number of items
        for client side validation. Its value is automatically updated
        whenever items are added or removed.
        The missing name attribute prevents submission to the server.
        d-none prevents display or user interaction without disabling
        validation.
        Display is provided by the itemCountDisplay span instead,
        which avoids the difficult problem of trying to find a way to
        disable user interaction without disabling validation.
        *@
        <input
            id="itemCountValidator"
            type="number"
            class="d-none"
            min="@MinListLen"
            max="@MaxListLen"
        >
        <div class="invalid-feedback">Must have between @MinListLen and @MaxListLen items</div>
    </div>
    <div class="mb-3">
        <ul class="list-group">
        @if (Model?.Items?.Any() ?? false)
        {
            foreach (var i in Model.Items.Select((item, idx) => (item, idx)))
            {
                ListItemHtml(i.item, "idx" + i.idx);
            }
        }
        else
        {
            ListItemHtml(indexName: "idx0");
        }
        </ul>
    </div>
    <input class="btn btn-primary" type="submit" value="@ViewData[SubmitOperationName]">
    @{
        string cancelUrl = null;
        if (null == Model)
        {
            cancelUrl = Url.Action(
                nameof(HomeController.Index),
                RoutingName<HomeController>()
            );
        }
        else {
            cancelUrl = Url.Action(
                nameof(TodoListController.Get),
                RoutingName<TodoListController>(),
                new { listId = Model.Id }
            );
        }
    }
    <a class="btn btn-secondary" href="@cancelUrl">Cancel</a>
</form>
